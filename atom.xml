<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>向本婷的个人博客</title>
  
  <subtitle>前端开发工程师</subtitle>
  <link href="https://pandarooster.github.com/atom.xml" rel="self"/>
  
  <link href="https://pandarooster.github.com/"/>
  <updated>2020-09-10T10:42:46.589Z</updated>
  <id>https://pandarooster.github.com/</id>
  
  <author>
    <name>向本婷</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue和elementUI搭建登录页和导航页并实现跳转</title>
    <link href="https://pandarooster.github.com/vue-log%20and%20nav/"/>
    <id>https://pandarooster.github.com/vue-log%20and%20nav/</id>
    <published>2020-09-10T10:41:00.000Z</published>
    <updated>2020-09-10T10:42:46.589Z</updated>
    
    <content type="html"><![CDATA[<p>当我们启动vue项目的时候。默认页面是app.vue，这里我就不截图了，首先是登录页，在你的compoents文件夹里面新建一个login的文件夹，然后在里面新建一个名为login.vue的文件，文件里面我的登录页是用elementUI写的，代码如下：</p><pre class="line-numbers language-elementUI" data-language="elementUI"><code class="language-elementUI">&lt;template&gt;    &lt;el-row type&#x3D;&quot;flex&quot; justify&#x3D;&quot;center&quot;&gt;        &lt;el-form :model&#x3D;&quot;user&quot; label-width&#x3D;&quot;80px&quot; &gt;            &lt;el-form-item label&#x3D;&quot;用户名&quot;&gt;                &lt;el-input v-model&#x3D;&quot;user.name&quot;&gt;&lt;&#x2F;el-input&gt;            &lt;&#x2F;el-form-item&gt;            &lt;el-form-item label&#x3D;&quot;密码&quot;&gt;                &lt;el-input v-model&#x3D;&quot;user.pass&quot; type&#x3D;&quot;password&quot;&gt;&lt;&#x2F;el-input&gt;            &lt;&#x2F;el-form-item&gt;            &lt;el-form-item&gt;                    &lt;el-button type&#x3D;&quot;primary&quot; icon&#x3D;&quot;el-icon-upload&quot; @click&#x3D;&quot;Login&quot;&gt;登录&lt;&#x2F;el-button&gt;            &lt;&#x2F;el-form-item&gt;        &lt;&#x2F;el-form&gt;        &lt;router-view&gt;&lt;&#x2F;router-view&gt;    &lt;&#x2F;el-row&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  &#x2F;&#x2F; 单页面中不支持前面的data:&#123;&#125;方式  data () &#123;    &#x2F;&#x2F; 相当于以前的function data()&#123;&#125;,这是es5之前的写法，新版本可以省略掉function    return &#123;      &#x2F;&#x2F; 之前是在里面直接写username，password等等，但是这里要写return      &#x2F;&#x2F; 因为一个组件不管要不要被其他组件用，只要这样定义了，它就会认为可能这个组件会在其他的组件中使用      &#x2F;&#x2F; 比如说在这里定义了一个变量，然后把这个组件引入到A组件中，A组件中修改了这个变量      &#x2F;&#x2F; 同时这个组件也在B组件中引用了，这时候A里面一修改，B里面也变了，它们用的是一个值      &#x2F;&#x2F; 可是一般来说可能希望在不同的组件中引用的时候，使用不同的值，所以这里要用return      &#x2F;&#x2F; 这样在A组件和B组件分别引用这个变量的时候是不会互相影响的      user: &#123;        &#x2F;&#x2F; username: &#39;zhangsan&#39;,        &#x2F;&#x2F; password: &#39;123&#39;        &#x2F;&#x2F; 为了登录方便，可以直接在这里写好用户名和密码的值      &#125;,      rules: &#123;        name: [          &#123;required: true, message: &#39;用户名不能为空&#39;, trigger: &#39;blur&#39;&#125;        ],        pass: [          &#123;required: true, message: &#39;密码不能为空&#39;, trigger: &#39;blur&#39;&#125;        ]      &#125;    &#125;  &#125;,  methods: &#123;    Login () &#123; &#x2F;&#x2F; 一点击登录按钮，这个方法就会执行    &#x2F;&#x2F;   alert(JSON.stringify(this.user))&#x2F;&#x2F; 可以直接把this.user对象传给后端进行校验用户名和密码      this.$router.push(&#123;path: &#39;&#x2F;nav&#x2F;page1&#39; &#125;) &#x2F;&#x2F;跳转路由的方法，path是你跳转的路由名字    &#125;  &#125;&#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在你的compoents文件夹里面找到一个router的文件夹，打开里面的index.js，这是一个路由配置文件，在里面引入你刚刚创建的登录文件并配置路由，引入文件的代码如下：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">import login from &#39;..&#x2F;components&#x2F;login&#x2F;login.vue&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后配置你登录页面的路由为项目的根路由，配置代码如下</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">routes: [    &#123;path: &#39;&#x2F;&#39;, name: &#39;login&#39;, component: login&#125;],&#x2F;&#x2F;&#39;&#x2F;&#39;代表设置登录页的路由为根路由，名字和组件名是你自己创建的页面组件的名字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接下来是创建导航页，跟登录页面一样，在compoents的文件夹下新建一个名为nav的文件夹，在里面新建一个叫nav.vue的文件，里面的代码如下：</p><pre class="line-numbers language-elementUI" data-language="elementUI"><code class="language-elementUI">&lt;template&gt;    &lt;div style&#x3D;&quot;background-color: #EBEBEB;min-height:800px&quot;&gt;        &lt;div style&#x3D;&quot;width:100%;background-color: #636363; overflow: hidden&quot;&gt;            &lt;span class&#x3D;&quot;demonstration&quot; style&#x3D;&quot;float:left;padding-top:10px;color:white;margin-left:1%&quot;&gt;                网站首页            &lt;&#x2F;span&gt;            &lt;span class&#x3D;&quot;demonstration&quot; style&#x3D;&quot;float:left;padding:5px;color:white;margin-left:2%;width:15%&quot;&gt;                &lt;!-- &lt;el-input                    placeholder&#x3D;&quot;请输入&quot;                     suffix-icon&#x3D;&quot;search&quot;                    v-model&#x3D;&quot;searchCriteria&quot;                    :prefix-icon-click&#x3D;&quot;handleIconClick&quot;&gt;                &lt;&#x2F;el-input&gt; --&gt;            &lt;&#x2F;span&gt;            &lt;span class&#x3D;&quot;demonstration&quot; style&#x3D;&quot;float:right;padding-top:10px;margin-right:1%&quot;&gt;                &lt;el-dropdown trigger&#x3D;&quot;click&quot;&gt;                  &lt;span class&#x3D;&quot;el-dropdown-link&quot; style&#x3D;&quot;color:white&quot;&gt;                    admin&lt;i class&#x3D;&quot;el-icon-caret-bottom el-icon--right&quot;&gt;&lt;&#x2F;i&gt;                  &lt;&#x2F;span&gt;                  &lt;el-dropdown-menu slot&#x3D;&quot;dropdown&quot;&gt;                    &lt;el-dropdown-item&gt;个人信息&lt;&#x2F;el-dropdown-item&gt;                    &lt;el-dropdown-item&gt;退出登录&lt;&#x2F;el-dropdown-item&gt;                  &lt;&#x2F;el-dropdown-menu&gt;                &lt;&#x2F;el-dropdown&gt;            &lt;&#x2F;span&gt;        &lt;&#x2F;div&gt;        &lt;div style&#x3D;&quot;margin-top:5px&quot;&gt;            &lt;el-row :gutter&#x3D;&quot;10&quot;&gt;                &lt;el-col :xs&#x3D;&quot;4&quot; :sm&#x3D;&quot;4&quot; :md&#x3D;&quot;4&quot; :lg&#x3D;&quot;4&quot;&gt;                    &lt;div&gt;                        &lt;!-- &lt;el-menu default-active&#x3D;&quot;$route.path&quot; @select&#x3D;&quot;handleSelect&quot; class&#x3D;&quot;el-menu-vertical-demo&quot; style&#x3D;&quot;min-height:800px&quot;&gt;                            &lt;el-menu-item index&#x3D;&quot;1&quot;&gt;&lt;i class&#x3D;&quot;el-icon-message&quot;&gt;&lt;&#x2F;i&gt;导航一&lt;&#x2F;el-menu-item&gt;                            &lt;el-menu-item index&#x3D;&quot;2&quot;&gt;&lt;i class&#x3D;&quot;el-icon-menu&quot;&gt;&lt;&#x2F;i&gt;导航二&lt;&#x2F;el-menu-item&gt;                            &lt;el-menu-item index&#x3D;&quot;3&quot;&gt;&lt;i class&#x3D;&quot;el-icon-setting&quot;&gt;&lt;&#x2F;i&gt;导航三&lt;&#x2F;el-menu-item&gt;                        &lt;&#x2F;el-menu&gt; --&gt;                         &lt;el-menu      default-active&#x3D;&quot;$route.path&quot;      class&#x3D;&quot;el-menu-vertical-demo&quot;      @open&#x3D;&quot;handleOpen&quot;      @close&#x3D;&quot;handleClose&quot;      @select&#x3D;&quot;handleSelect&quot;&gt;      &lt;el-submenu index&#x3D;&quot;1&quot;&gt;        &lt;template slot&#x3D;&quot;title&quot;&gt;          &lt;i class&#x3D;&quot;el-icon-location&quot;&gt;&lt;&#x2F;i&gt;          &lt;span&gt;导航一&lt;&#x2F;span&gt;        &lt;&#x2F;template&gt;        &lt;!-- 导航一下拉菜单 --&gt;        &lt;el-menu-item-group&gt;          &lt;!-- &lt;template slot&#x3D;&quot;title&quot;&gt;分组一&lt;&#x2F;template&gt; --&gt;          &lt;el-menu-item index&#x3D;&quot;1-1&quot;&gt;选项1&lt;&#x2F;el-menu-item&gt;          &lt;el-menu-item index&#x3D;&quot;1-2&quot;&gt;选项2&lt;&#x2F;el-menu-item&gt;        &lt;&#x2F;el-menu-item-group&gt;        &lt;el-menu-item-group title&#x3D;&quot;分组2&quot;&gt;          &lt;el-menu-item index&#x3D;&quot;1-3&quot;&gt;选项3&lt;&#x2F;el-menu-item&gt;        &lt;&#x2F;el-menu-item-group&gt;        &lt;el-submenu index&#x3D;&quot;1-4&quot;&gt;          &lt;template slot&#x3D;&quot;title&quot;&gt;选项4&lt;&#x2F;template&gt;          &lt;el-menu-item index&#x3D;&quot;1-4-1&quot;&gt;选项1&lt;&#x2F;el-menu-item&gt;        &lt;&#x2F;el-submenu&gt;      &lt;&#x2F;el-submenu&gt;      &lt;el-menu-item index&#x3D;&quot;2&quot;&gt;        &lt;i class&#x3D;&quot;el-icon-menu&quot;&gt;&lt;&#x2F;i&gt;        &lt;span slot&#x3D;&quot;title&quot;&gt;导航二&lt;&#x2F;span&gt;      &lt;&#x2F;el-menu-item&gt;      &lt;!-- &lt;el-menu-item index&#x3D;&quot;3&quot; disabled&gt;        &lt;i class&#x3D;&quot;el-icon-document&quot;&gt;&lt;&#x2F;i&gt;        &lt;span slot&#x3D;&quot;title&quot;&gt;导航三&lt;&#x2F;span&gt;      &lt;&#x2F;el-menu-item&gt; --&gt;       &lt;el-menu-item index&#x3D;&quot;3&quot;&gt;        &lt;i class&#x3D;&quot;el-icon-document&quot;&gt;&lt;&#x2F;i&gt;        &lt;span slot&#x3D;&quot;title&quot;&gt;导航三&lt;&#x2F;span&gt;      &lt;&#x2F;el-menu-item&gt;      &lt;el-menu-item index&#x3D;&quot;4&quot;&gt;        &lt;i class&#x3D;&quot;el-icon-setting&quot;&gt;&lt;&#x2F;i&gt;        &lt;span slot&#x3D;&quot;title&quot;&gt;导航四&lt;&#x2F;span&gt;      &lt;&#x2F;el-menu-item&gt;    &lt;&#x2F;el-menu&gt;                    &lt;&#x2F;div&gt;                &lt;&#x2F;el-col&gt;                &lt;el-col :xs&#x3D;&quot;20&quot; :sm&#x3D;&quot;20&quot; :md&#x3D;&quot;20&quot; :lg&#x3D;&quot;20&quot;&gt;                    &lt;div&gt;                        &lt;div style&#x3D;&quot;border: 1px solid #A6A6A6; border-radius:6px; padding:5px; margin:2px; background-color: white&quot;&gt;                            &lt;el-breadcrumb separator&#x3D;&quot;&#x2F;&quot;&gt;                                  &lt;el-breadcrumb-item :key&#x3D;index v-for&#x3D;&quot;(item,index) in breadcrumbItems&quot;&gt;&#123;&#123;item&#125;&#125;&lt;&#x2F;el-breadcrumb-item&gt;                            &lt;&#x2F;el-breadcrumb&gt;                        &lt;&#x2F;div&gt;                    &lt;&#x2F;div&gt;                    &lt;!-- router-view显示跳转页面 --&gt;                        &lt;div style&#x3D;&quot;margin-top:10px&quot;&gt;                        &lt;router-view style&#x3D;&quot;#fff&quot;&gt;&lt;&#x2F;router-view&gt;                    &lt;&#x2F;div&gt;                &lt;&#x2F;el-col&gt;            &lt;&#x2F;el-row&gt;        &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script type&#x3D;&quot;text&#x2F;ecmascript-6&quot;&gt;export default &#123;  data () &#123;    return &#123;      &#x2F;&#x2F; searchCriteria: &#39;&#39;,      path: &#39;&#x2F;nav&#x2F;page1&#39;,      breadcrumbItems: [&#39;导航一&#39;]    &#125;  &#125;,  methods: &#123;    handleIconClick (ev) &#123;      console.log(ev)    &#125;,    handleOpen (key, keyPath) &#123;      console.log(key, keyPath)    &#125;,    handleClose (key, keyPath) &#123;      console.log(key, keyPath)    &#125;,    handleSelect (key, keyPath) &#123;      switch (key) &#123;        case &#39;1&#39;:          this.$router.push(&#39;&#x2F;nav&#x2F;page1&#39;)          this.breadcrumbItems &#x3D; [&#39;导航一&#39;]          break        case &#39;2&#39;:          this.$router.push(&#39;&#x2F;nav&#x2F;page2&#39;)          this.breadcrumbItems &#x3D; [&#39;导航二&#39;]          break        case &#39;3&#39;:          this.$router.push(&#39;&#x2F;nav&#x2F;page3&#39;)          this.breadcrumbItems &#x3D; [&#39;导航三&#39;]          break        case &#39;4&#39;:          this.$router.push(&#39;&#x2F;nav&#x2F;Page4&#39;)          this.breadcrumbItems &#x3D; [&#39;导航四&#39;]          break      &#125;    &#125;  &#125;&#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里面的page1，page2，page3，page4四个页面在compoents中创建，page1.vue里面的代码如下：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;    &lt;div&gt;        这是第一个页面    &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script type&#x3D;&quot;text&#x2F;ecmascript-6&quot;&gt;export default &#123;  data () &#123;    return &#123;&#125;  &#125;&#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是page1文件，在导航菜单的右边显示，你可以把不同的页面写上不同的文字以示区分，当然我们也要在index.js引入这些组件，完整的引入代码如下：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">import Vue from &#39;vue&#39;&#x2F;&#x2F; eslint-disable-next-line import&#x2F;no-duplicatesimport Router from &#39;vue-router&#39;&#x2F;&#x2F; eslint-disable-next-line import&#x2F;no-duplicatesimport VueRouter from &#39;vue-router&#39;import nav from &#39;..&#x2F;components&#x2F;nav&#x2F;nav.vue&#39;import login from &#39;..&#x2F;components&#x2F;login&#x2F;login.vue&#39;import page1 from &#39;..&#x2F;components&#x2F;page1.vue&#39;import page2 from &#39;..&#x2F;components&#x2F;page2.vue&#39;import page3 from &#39;..&#x2F;components&#x2F;page3.vue&#39;import page4 from &#39;..&#x2F;components&#x2F;page4.vue&#39;Vue.use(Router)&#x2F;&#x2F; 解决多次重复访问报错的问题const originalPush &#x3D; VueRouter.prototype.pushVueRouter.prototype.push &#x3D; function push (location) &#123;  return originalPush.call(this, location).catch(err &#x3D;&gt; err)&#125;export default new Router(&#123;  &#x2F;&#x2F; base: &#39;login&#39;,  routes: [    &#123;path: &#39;&#x2F;&#39;, name: &#39;login&#39;, component: login&#125;,    &#123;      path: &#39;&#x2F;nav&#39;,      name: &#39;nav&#39;,      &#x2F;&#x2F; redirect: &#39;&#x2F;nav&#39;,      component: nav,      children: [&#123;        path: &#39;page1&#39;, name: &#39;page1&#39;, component: page1      &#125;,      &#123;        path: &#39;page2&#39;, component: page2      &#125;,      &#123;        path: &#39;page3&#39;, component: page3      &#125;,      &#123;        path: &#39;page4&#39;, component: page4      &#125;]    &#125;]&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里有一段代码：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&#x2F;&#x2F; 解决多次重复访问报错的问题const originalPush &#x3D; VueRouter.prototype.pushVueRouter.prototype.push &#x3D; function push (location) &#123;  return originalPush.call(this, location).catch(err &#x3D;&gt; err)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为我运行代码的时候总是会重复访问路由，然后浏览器总会报错，所以我加上了这一句，当然里面的vueRouter也是需要引入的，引入代码如下：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">import VueRouter from &#39;vue-router&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是你这样引入它会一直报错，这时候你只需要加上这两句就可以了</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&#x2F;&#x2F; eslint-disable-next-line import&#x2F;no-duplicates&#x2F;&#x2F; eslint-disable-next-line import&#x2F;no-duplicates<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样登录页就可以直接跳转导航页了，顺便说一句elementUI不是vue自带的，需要自行下载配置，配置和引入我就不多做说明了，请自行百度</p><p>接下来就是输入npm run dev查看效果了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;当我们启动vue项目的时候。默认页面是app.vue，这里我就不截图了，首先是登录页，在你的compoents文件夹里面新建一个login的文件夹，然后在里面新建一个名为login.vue的文件，文件里面我的登录页是用elementUI写的，代码如下：&lt;/p&gt;
&lt;pre c</summary>
      
    
    
    
    
    <category term="vue和elementUI" scheme="https://pandarooster.github.com/tags/vue%E5%92%8Celementui/"/>
    
  </entry>
  
  <entry>
    <title>关于vue的eslint常出现的错误的解决办法</title>
    <link href="https://pandarooster.github.com/vue-eslinterror/"/>
    <id>https://pandarooster.github.com/vue-eslinterror/</id>
    <published>2020-08-26T05:40:00.000Z</published>
    <updated>2020-08-29T18:22:38.339Z</updated>
    
    <content type="html"><![CDATA[<p> 下载完vue之后，因为vue的eslint检查非常严格，只要格式不对就会报错，所以我把我经常遇到的坑还有错误总结了一下。</p><p>首先我们需要配置eslint的自动修复，这样你只要保存它就会自动修正代码格式，我用的代码编辑器是vscode,所以我在setting.json中加入了以下代码</p><pre class="line-numbers language-vscode的setting.json" data-language="vscode的setting.json"><code class="language-vscode的setting.json">&#123;    &#x2F;&#x2F; vscode默认启用了根据文件类型自动设置tabsize的选项    &quot;editor.detectIndentation&quot;: false,    &#x2F;&#x2F; 重新设定tabsize    &quot;editor.tabSize&quot;: 2,    &#x2F;&#x2F; #每次保存的时候自动格式化    &quot;editor.formatOnSave&quot;: true,    &#x2F;&#x2F; #每次保存的时候将代码按eslint格式进行修复    &quot;eslint.autoFixOnSave&quot;: true,    &#x2F;&#x2F; 添加 vue 支持    &quot;eslint.validate&quot;: [    &quot;javascript&quot;,    &quot;javascriptreact&quot;,    &#123;     &quot;language&quot;: &quot;vue&quot;,     &quot;autoFix&quot;: true    &#125;,    &quot;html&quot;,    &quot;vue&quot;,    ],    &#x2F;&#x2F; #让prettier使用eslint的代码格式进行校验    &quot;prettier.eslintIntegration&quot;: true,    &#x2F;&#x2F; #去掉代码结尾的分号    &quot;prettier.semi&quot;: false,    &#x2F;&#x2F; #使用带引号替代双引号    &quot;prettier.singleQuote&quot;: true,    &#x2F;&#x2F; #让函数(名)和后面的括号之间加个空格    &quot;javascript.format.insertSpaceBeforeFunctionParenthesis&quot;: true,    &#x2F;&#x2F; #让vue中的js按编辑器自带的ts格式进行格式化    &#x2F;&#x2F; &quot;vetur.format.defaultFormatter.js&quot;: &quot;vscode-typescript&quot;,    &quot;vetur.format.defaultFormatter.js&quot;: &quot;prettier-eslint&quot;,    &quot;vetur.format.defaultFormatterOptions&quot;: &#123;    &quot;js-beautify-html&quot;: &#123;     &quot;wrap_attributes&quot;: &quot;force-aligned&quot;     &#x2F;&#x2F; #vue组件中html代码格式化样式    &#125;    &#125;,    &quot;window.zoomLevel&quot;: 0,    &quot;explorer.confirmDelete&quot;: false,    &quot;explorer.confirmDragAndDrop&quot;: false,    &quot;editor.renderControlCharacters&quot;: true,    &quot;editor.renderWhitespace&quot;: &quot;all&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后把我们的vue根目录文件中的.eslint.js中的module.export换成这样一段代码</p><pre class="line-numbers language-vue中的.eslint.js" data-language="vue中的.eslint.js"><code class="language-vue中的.eslint.js">root: true,  parserOptions: &#123;      parser: &#39;babel-eslint&#39;  &#125;,  env: &#123;      browser: true  &#125;,  extends: [      &#x2F;&#x2F; https:&#x2F;&#x2F;github.com&#x2F;vuejs&#x2F;eslint-plugin-vue#priority-a-essential-error-prevention      &#x2F;&#x2F; consider switching to &#96;plugin:vue&#x2F;strongly-recommended&#96; or &#96;plugin:vue&#x2F;recommended&#96; for stricter rules.      &#39;plugin:vue&#x2F;essential&#39;,      &#x2F;&#x2F; https:&#x2F;&#x2F;github.com&#x2F;standard&#x2F;standard&#x2F;blob&#x2F;master&#x2F;docs&#x2F;RULES-en.md      &#39;standard&#39;  ],  &#x2F;&#x2F; required to lint *.vue files  plugins: [&#39;html&#39;],  &#x2F;&#x2F; add your custom rules here  rules: &#123;      &#x2F;&#x2F; allow async-await      &#39;no-console&#39;: &#39;off&#39;,      indent: [&#39;error&#39;, 2, &#123; SwitchCase: 1 &#125;],      semi: [&#39;error&#39;, &#39;always&#39;],      &#x2F;&#x2F; 三等号      &#39;eqeqeq&#39;: 0,      &#x2F;&#x2F; 强制在注释中 &#x2F;&#x2F; 或 &#x2F;* 使用一致的空格      &#39;spaced-comment&#39;: 0,      &#x2F;&#x2F; 关键字后面使用一致的空格      &#39;keyword-spacing&#39;: 0,      &#x2F;&#x2F; 强制在 function的左括号之前使用一致的空格      &#39;space-before-function-paren&#39;: 0,      &#x2F;&#x2F; 引号类型      &quot;quotes&quot;: [0, &quot;single&quot;],      &quot;vue&#x2F;no-parsing-error&quot;: [2, &#123; &quot;x-invalid-end-tag&quot;: false &#125;],      &#x2F;&#x2F; &#39;space-before-function-paren&#39;: [      &#x2F;&#x2F;     &#39;error&#39;,      &#x2F;&#x2F;     &#123; anonymous: &#39;always&#39;, named: &#39;never&#39; &#125;      &#x2F;&#x2F; ],      &#39;generator-star-spacing&#39;: &#39;off&#39;,      &#x2F;&#x2F; allow debugger during development      &#39;no-debugger&#39;: process.env.NODE_ENV &#x3D;&#x3D;&#x3D; &#39;production&#39; ? &#39;error&#39; : &#39;off&#39;      &#x2F;&#x2F; js语句结尾必须使用 ;  &#x2F;&#x2F; &#39;semi&#39;: [&#39;off&#39;, &#39;always&#39;],  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一个应该是最经常遇到的，我们的编辑器会报错，missing semicolon.意思就是缺少分号，这个时候只要我们在报错的地方后面加上分号就可以了。<br><img src="vue-eslinterror/image/sec.png" alt="alt"></p><p>第二个也是经常会遇到的，报错信息是这样的，说这个import只能用es6。<br><img src="vue-eslinterror/image/jshint6.png" alt="alt"></p><p>解决办法有两种，一种是在我们的报错页面加上这个语句</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//jshint esversion:6</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是这个只是局部引入，如果所有的页面都报这个错误的话，我们这样局部引入就要在每个页面都加上这个。这样非常繁琐，这就需要我们全局引入了，我们只需要在你创建的项目根目录建立一个.jshintrc文件，里面加入这样一段代码</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>    esversion<span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样的话所有页面会引入这个文件，可是还会出现这样的问题，就是你打开其他配置页面，有的页面用了use strict严格模式，有时候就会报错，这时候只需要把严格模式注释掉就好了</p><p>还有就是在我们的index.js文件里面最后一行会报错说有语法问题，此时只需要回车</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 下载完vue之后，因为vue的eslint检查非常严格，只要格式不对就会报错，所以我把我经常遇到的坑还有错误总结了一下。&lt;/p&gt;
&lt;p&gt;首先我们需要配置eslint的自动修复，这样你只要保存它就会自动修正代码格式，我用的代码编辑器是vscode,所以我在setting.j</summary>
      
    
    
    
    
    <category term="vue的eslint" scheme="https://pandarooster.github.com/tags/vue%E7%9A%84eslint/"/>
    
  </entry>
  
  <entry>
    <title>404</title>
    <link href="https://pandarooster.github.com/404/"/>
    <id>https://pandarooster.github.com/404/</id>
    <published>2020-08-22T08:41:00.000Z</published>
    <updated>2020-08-29T18:21:37.006Z</updated>
    
    
    <summary type="html">你来到了没有知识的荒原</summary>
    
    
    
    
  </entry>
  
</feed>
